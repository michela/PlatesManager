#!/usr/bin/env python
# encoding: utf-8
"""
group.py

runs on cmd line or via CGI. Reads web spreadsheet, replaces  users and group authentication files and restarts Apache

Created by Michela Ledwidge on 2008-01-04.
Copyright (c) 2008 MOD Films. All rights reserved.
"""

import os
import sys
import getopt
import urllib2
import csv
import crypt
import time
from genshi.template import TemplateLoader
from popen2 import Popen4
from trac.env import Environment

help_message = '''
sudo python group.py [-u username -p password -v]

e.g.
sudo python useradmin.py
'''

class Page:
	def __init__(self,template, pagetitle='', message=''):
		if pagetitle == '':
			pagetitle = template
		loader = TemplateLoader(
		    os.path.join(os.path.dirname(__file__), 'templates'), auto_reload=True
		)
		tmpl = loader.load(template)
		self.render = tmpl.generate(title=pagetitle, message=message,restart='/update/group/restart').render('html',doctype='html')
		#self.render = "<html><body>testing</body></html>"

class API:
	def __init__(self):
		self.name = "API base class"
		self.key = null
		self.ticket = null
		self.id = null
		
class ZohoSheet(API):
	def __init__(self):
		self.help_url = "http://writer.zoho.com/public/help/zohoapi/fullpage"
		self.key = "676123b7e3948d8d08991bbffb6566ea"
		self.ticket_request = "https://accounts.zoho.com/login?servicename=ZohoSheet&FROM_AGENT=true&LOGIN_ID=michela@thequality.com&PASSWORD=tv4me18"
		self.book_id = "14386000000032003"
		self.id = self.book_id
		req = urllib2.Request(self.ticket_request)
		response = urllib2.urlopen(req)
		string = response.readlines()
		for line in string:
			#print line
			if line[:7] == 'TICKET=':
				self.ticket = line[7:]
		self.book_query = "http://sheet.zoho.com/api/private/xml/books?apikey=" + self.key + "&ticket=" + self.ticket
		self.download_csv_query = "http://sheet.zoho.com/api/private/csv/download/" + self.id + "?apikey=" + self.key + "&ticket=" + self.ticket
		req = urllib2.Request(self.download_csv_query)
		response = urllib2.urlopen(req)
		self.data = csv.reader(response)
				
class Users:
	'''User data sourced via an API class'''
	def __init__(self, src):
		self.group = 'iaa'
		self.password_file = "/usr/share/trac/users_iaa"
		self.group_file = "/usr/share/trac/group_iaa"
		self.src = src
		self.users = ''
		self.data = []
		
	def write_passwords(self):
		'''Update config file'''
		f= open(self.password_file, 'w')
		username_col = 0
		password_col = 1
		for row in self.src.data:
			self.data.append(row)
			#print row[username_col]
			if row[username_col] == 'USERNAME' or row[username_col] == '':
				continue
			# crypt using current time as salt
			p = crypt.crypt(row[password_col],time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))
			f.write("%s:%s\n" % (row[username_col], p) )
			self.users = self.users + " " + row[username_col]
		f.close
		#print self.password_file, "updated"
	
	def write_emails(self):
		'''Update shots and renders sqlite databases'''
		
		# must use config file
		#tracRendersEnv = Environment('/mnt/trac/renders')
		#tracShotsEnv = Environment('/mnt/trac/shots')
		#tracRendersEnv = Environment('/home/www-apps/trac/renders')
		#tracShotsEnv = Environment('/home/www-apps/trac/iaa')
		env = tracShotsEnv
		db = env.get_db_cnx()
		cursor = db.cursor()
		username_col = 0
		password_col = 1
		email_col = 2
		for row in self.data:
			print row
			sql = "insert into session_attribute (sid,authenticated, name, value) VALUES ('%s',%d,'email','%s')" \
				% (row[username_col],1,row[email_col])
			print sql
			cursor.execute(sql)
		db.commit()
		sys.exit(0)
		
		
	def write_group(self):
		'''Update config file'''
		f= open(self.group_file, 'w')
		username_col = 0
		#print self.users
		f.write("%s: %s\n" % (self.group, self.users ))
		f.close
		#print self.group_file, "updated"
		
	def update(self):
		'''Update Apache2 config files'''
		self.write_passwords()
		self.write_group()
		#self.write_emails() # there's a bug
		
class Usage(Exception):
	def __init__(self, msg):
		self.msg = msg


def main(argv=None):
	if argv is None:
		argv = sys.argv
	try:
		try:
			opts, args = getopt.getopt(argv[1:], "u:p:ho:v", ["user=", "password=", "help", "output="])
		except getopt.error, msg:
			raise Usage(msg)
	
		# option processing
		for option, value in opts:
			if option == "-v":
				verbose = True
			else:
				verbose = False
			if option in ("-h", "--help"):
				raise Usage(help_message)
			if option in ("-o", "--output"):
				output = value
			if option in ("-u", "--user"):
				user = value
			if option in ("-p", "--password"):
				password = value
		try:
			# main process
				
			# support multiple APIs here
			src = ZohoSheet()
			users = Users(src)
			users.update()
			return Page('group.html','modfilms.net | IAA | User Management | Update Group','User group updated from ZohoSheet').render
			
		except UnboundLocalError, msg:
			raise Usage(msg)
			
	
	except Usage, err:
		print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
		print >> sys.stderr, "\t for help use --help"
		return 2
	
	
# http://sheet.zoho.com/api/private/xls/download/[bookId]?apikey=[apikey]&ticket=[ticket]

def restart():
	'''restart Apache server - never returns so direct to hidden frame'''
	# TODO - check security
	cmd = "sudo /home/www-apps/update/restart"
	result = os.system(cmd)
	
if __name__ == "__main__":
	sys.exit(main())

